{"version":3,"file":"static/js/604.0902863d.chunk.js","mappings":"uNAEaA,EAAUC,EAAAA,GAAAA,IAAH,q3BAeMC,EAAQ,MACxBA,EAAQ,OAsBLC,EAASF,EAAAA,GAAAA,IAAH,+YAkBNG,EAAOH,EAAAA,GAAAA,EAAH,6J,mBCtDJI,EAAO,SAAC,GAAc,IAAZC,EAAW,EAAXA,KACbC,EAA6CD,EAA7CC,GAAIC,EAAyCF,EAAzCE,UAAWC,EAA8BH,EAA9BG,OAAQC,EAAsBJ,EAAtBI,OAAQC,EAAcL,EAAdK,UACvC,GAAiCC,EAAAA,EAAAA,MAAjC,eAAOC,EAAP,KAAkBC,EAAlB,KAAkBA,UAKlB,IAJsBC,EAWtB,OACE,UAACf,EAAD,YACE,SAACG,EAAD,CAAQa,IAAI,SAASC,IAAKR,EAAQS,MAAO,MAEzC,UAACd,EAAD,CAAMe,UAAW,QAAjB,UAA2BT,EAA3B,cACA,UAACN,EAAD,gBAhBkBW,EAgBGJ,EAfhBI,EAAIK,WAAWC,QAAQ,wBAAyB,MAerD,iBACA,SAAC,KAAD,CACEF,UAAW,CAACX,EAAY,YAAc,GAAIM,EAAY,UAAY,IAClEQ,KAAK,SACLC,QAhBe,WAInBV,EAHgBL,EACZ,CAAED,GAAIA,EAAIC,WAAW,EAAOG,UAAWA,EAAY,GACnD,CAAEJ,GAAIA,EAAIC,WAAW,EAAMG,UAAWA,EAAY,GAEvD,EAQG,SAKGH,EAAY,YAAc,aAIlC,E,UCgDD,EA3Ee,WACb,OAAwBgB,EAAAA,EAAAA,UAAS,GAAjC,eAAOC,EAAP,KAAaC,EAAb,KACA,GAA0CC,EAAAA,EAAAA,IAAiBF,GAA7CG,EAAd,EAAQtB,KAAauB,EAArB,EAAqBA,MAAOf,EAA5B,EAA4BA,UAC5B,GAA4BU,EAAAA,EAAAA,UAAS,IAArC,eAAOM,EAAP,KAAeC,EAAf,KACA,GAAsCP,EAAAA,EAAAA,UAASI,GAA/C,eAAOI,EAAP,KAAoBC,EAApB,MAEAC,EAAAA,EAAAA,YAAU,YACU,WAChB,OAAQJ,GACN,IAAK,YACHG,EAAeL,EAAME,QAAO,SAAAK,GAAI,OAAuB,IAAnBA,EAAK3B,SAAT,KAChC,MACF,IAAK,gBACHyB,EAAeL,EAAME,QAAO,SAAAK,GAAI,OAAuB,IAAnBA,EAAK3B,SAAT,KAChC,MACF,QACEyB,EAAeL,GAGpB,CACDQ,EACD,GAAE,CAACN,EAAQF,IAOZ,OAAId,GACK,SAAC,KAAD,uBAIP,UAAC,KAAD,WACGe,GACC,iDAEA,iCACE,iCACE,UAAC,KAAD,sBACW,KACT,kBAAOQ,SAlBE,SAAAC,GACnB,IAAMC,EAAQD,EAAEE,OAAOD,MACvBR,EAAUQ,EACX,EAe0CE,KAAK,eAEtC,sBAAUlC,GAAG,SAAb,WACE,mBAAQgC,MAAM,SACd,mBAAQA,MAAM,eACd,mBAAQA,MAAM,wBAGjBP,GAAeA,EAAYU,OAAS,GACnC,wBACGV,EAAYW,KAAI,SAAAR,GACf,OACE,yBACE,SAAC9B,EAAD,CAAMC,KAAM6B,KADLA,EAAK5B,GAIjB,OAGH,gDAIN,SAAC,KAAD,CACEe,KAAK,SACLC,QAAS,WACPG,GAAQ,SAAAkB,GAAQ,OAAIA,EAAW,CAAf,GACjB,EAJH,yBAUL,C","sources":["components/User/User.styled.js","components/User/User.jsx","pages/TweetsPage.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const Wrapper = styled.div`\n  width: 380px;\n  height: 460px;\n\n  margin-bottom: 20px;\n  margin-left: auto;\n  margin-right: auto;\n\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n\n  box-shadow: -2.5777px 6.87386px 20.6216px rgba(0, 0, 0, 0.23);\n  border-radius: 20px;\n\n  background-image: url(${require('../img/background/bg1.png')}),\n    url(${require('../img/background/bg2.png')}),\n  \n    linear-gradient(114.99deg, #471ca9 -0.99%, #5736a3 54.28%, #4b2a99 78.99%);\n\n  background-repeat: no-repeat;\n  background-size: auto, auto;\n  background-position: top 28px center, top 20px left 20px, center;\n\n  &::before {\n    content: '';\n    display: flex;\n    width: 100%;\n    height: 8px;\n    box-shadow: 0px 3.43693px 3.43693px rgba(0, 0, 0, 0.06),\n      inset 0px -1.71846px 3.43693px #ae7be3,\n      inset 0px 3.43693px 2.5777px #fbf8ff;\n    background-color: #ebd8ff;\n    position: relative;\n    top: 222px;\n  }\n`;\n\nexport const Avatar = styled.img`\nbox-sizing: border-box;\n  display: inline-block;\n  position: relative;\n  padding: 8px;\n  background: #fbf8ff;\n\n  border-radius: 50%;\n  margin-top: 178px;\n  margin-bottom: 26px;\n  z-index: 1;\n\n  box-shadow: 0px 4.39163px 4.39163px rgba(0, 0, 0, 0.06),\n    inset 0px -2.19582px 4.39163px #ae7be3,\n    inset 0px 4.39163px 3.29372px #fbf8ff;\n  border-radius: 50%;\n`;\n\nexport const Text = styled.p`\n  font-weight: 500;\n  font-size: 20px;\n  line-height: 24px;\n  color: #ebd8ff;\n  &.first {\n    margin-bottom: 16px;\n   \n  }\n\n`;\n","import { useSetFollowMutation } from 'redux/tweetsApi';\nimport { Avatar, Text, Wrapper } from './User.styled';\nimport { Button } from 'commonStyles.styled';\n\nexport const User = ({ data }) => {\n  const { id, following, avatar, tweets, followers } = data;\n  const [setData, { isLoading }] = useSetFollowMutation();\n  function formatNumber(num) {\n    return num.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\n  }\n\n  const handlerClick = () => {\n    const newData = following\n      ? { id: id, following: false, followers: followers - 1 }\n      : { id: id, following: true, followers: followers + 1 };\n    setData(newData);\n  };\n\n  return (\n    <Wrapper>\n      <Avatar alt=\"avatar\" src={avatar} width={80} />\n\n      <Text className={'first'}>{tweets} TWEETS</Text>\n      <Text> {formatNumber(followers)} FOLLOWERS</Text>\n      <Button\n        className={[following ? 'following' : '', isLoading ? 'waiting' : '']}\n        type=\"button\"\n        onClick={handlerClick}\n      >\n        {following ? 'FOLLOWING' : 'FOLLOW'}\n      </Button>\n    </Wrapper>\n  );\n};\n","import { User } from 'components/User/User';\nimport { Button, Container, StyledLabel, StyledLink } from 'commonStyles.styled';\nimport { useEffect, useState } from 'react';\nimport { useGetUsersQuery } from 'redux/tweetsApi';\n\n\nconst Tweets = () => {\n  const [page, setPage] = useState(3);\n  const { data: users, error, isLoading } = useGetUsersQuery(page);\n  const [filter, setFilter] = useState('');\n  const [usersToShow, setUsersToShow] = useState(users);\n\n  useEffect(() => {\n    const filtering = () => {\n      switch (filter) {\n        case 'following':\n          setUsersToShow(users.filter(user => user.following === true));\n          break;\n        case 'not following':\n          setUsersToShow(users.filter(user => user.following === false));\n          break;\n        default:\n          setUsersToShow(users);\n          break;\n      }\n    };\n    filtering();\n  }, [filter, users]);\n\n  const handleChange = e => {\n    const value = e.target.value;\n    setFilter(value);\n  };\n\n  if (isLoading) {\n    return <StyledLink>loading</StyledLink>;\n  }\n\n  return (\n    <Container>\n      {error ? (\n        <p>Something went wrong</p>\n      ) : (\n        <>\n          <>\n            <StyledLabel>\n              Filter: {' '}\n              <input onChange={handleChange} list=\"filter\" />\n            </StyledLabel>\n            <datalist id=\"filter\">\n              <option value=\"all\" />\n              <option value=\"following\" />\n              <option value=\"not following\" />\n            </datalist>\n          </>\n          {usersToShow && usersToShow.length > 0 ? (\n            <ul>\n              {usersToShow.map(user => {\n                return (\n                  <li key={user.id}>\n                    <User data={user} />\n                  </li>\n                );\n              })}\n            </ul>\n          ) : (\n            <p>no users to show</p>\n          )}\n        </>\n      )}\n      <Button\n        type=\"button\"\n        onClick={() => {\n          setPage(prevPage => prevPage + 3);\n        }}\n      >\n        Load more\n      </Button>\n    </Container>\n  );\n};\nexport default Tweets;\n"],"names":["Wrapper","styled","require","Avatar","Text","User","data","id","following","avatar","tweets","followers","useSetFollowMutation","setData","isLoading","num","alt","src","width","className","toString","replace","type","onClick","useState","page","setPage","useGetUsersQuery","users","error","filter","setFilter","usersToShow","setUsersToShow","useEffect","user","filtering","onChange","e","value","target","list","length","map","prevPage"],"sourceRoot":""}